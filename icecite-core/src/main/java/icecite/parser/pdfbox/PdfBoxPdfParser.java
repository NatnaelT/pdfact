package icecite.parser.pdfbox;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.util.Set;

import com.google.inject.Inject;

import icecite.models.PdfCharacter;
import icecite.models.PdfDocument;
import icecite.models.PdfDocumentFactory;
import icecite.models.PdfFigure;
import icecite.models.PdfPage;
import icecite.models.PdfPageFactory;
import icecite.models.PdfShape;
import icecite.parser.PdfParser;
import icecite.parser.pdfbox.core.PdfStreamEngine;
import icecite.parser.pdfbox.core.operators.OperatorProcessor;

/**
 * An implementation of {@link PdfParser} using Apache PdfBox.
 *
 * @author Claudius Korzen
 */
public class PdfBoxPdfParser extends PdfStreamEngine implements PdfParser {
  /**
   * The factory to create instances of PdfDocument.
   */
  protected PdfDocumentFactory pdfDocumentFactory;

  /**
   * The factory to create instances of PdfPage.
   */
  protected PdfPageFactory pdfPageFactory;

  /**
   * The PDF document.
   */
  protected PdfDocument pdfDocument;

  /**
   * The current page of the PDF document.
   */
  protected PdfPage pdfPage;

  /**
   * Creates a new PDF parser.
   * 
   * @param pdfDocumentFactory
   *        The factory to create instances of PdfDocument.
   * @param pdfPageFactory
   *        The factory to create instances of PdfPage.
   * @param operators
   *        The set of operators to investigate while parsing.
   */
  @Inject
  public PdfBoxPdfParser(PdfDocumentFactory pdfDocumentFactory,
      PdfPageFactory pdfPageFactory, Set<OperatorProcessor> operators) {
    super(operators);
    this.pdfDocumentFactory = pdfDocumentFactory;
    this.pdfPageFactory = pdfPageFactory;
  }

  // ==========================================================================

  @Override
  public PdfDocument parsePdf(Path pdf) throws IOException {
    return parsePdf(pdf != null ? pdf.toFile() : null);
  }

  @Override
  public PdfDocument parsePdf(File pdf) throws IOException {
    // Parse the PDF.
    processPdf(pdf);

    // Return the PdfDocument generated by the handler methods below.
    return this.pdfDocument;
  }

  // ==========================================================================
  // Handler methods.

  @Override
  public void handlePdfStart(File pdf) {
    // Create a new PDF document.
    this.pdfDocument = this.pdfDocumentFactory.create(pdf);
  }

  @Override
  public void handlePdfEnd(File pdf) {
    // Nothing to do so far.
  }

  @Override
  public void handlePageStart(int pageNum) {
    this.pdfPage = this.pdfPageFactory.create(pageNum);
  }

  @Override
  public void handlePageEnd(int pageNum) {
    this.pdfDocument.addPage(this.pdfPage);
  }

  @Override
  public void handlePdfCharacter(PdfCharacter character) {
    this.pdfPage.addCharacter(character);
  }

  @Override
  public void handlePdfFigure(PdfFigure figure) {
    this.pdfPage.addFigure(figure);
  }

  @Override
  public void handlePdfShape(PdfShape shape) {
    this.pdfPage.addShape(shape);
  }
}